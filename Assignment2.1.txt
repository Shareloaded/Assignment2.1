1.
public class Acad
{
public static voi main(String[] args)
{
int a=10,b=20;
System.out.println(a+b);
}
}

2.
import java.util.Scanner;
public class Acad1
{
public static void main(String[] args)
{
int a,b;
Scanner ob=new Scanner(System.in);
a=ob.nextInt();
b=ob.nextInt();
System.out.println(a+b);
}
}

3.
import java.util.Scanner;
public class Acad2
{
public void sum(int a,int b)
{
System.out.print("Sum is :"+(a+b));
}
public static void main(String[] args)
{
Acad2 ob1=new Acad2();
Scanner ob=new Scanner(System.in);
int a=ob.nextInt();
int b=ob.nextInt();
System.out.println("First Number :"+a);
System.out.println("Second Number :"+b);
ob1.sum(a,b);
}
}

4.
import java.util.Scanner;
public class acad
{
public static void main(String args[])
{
int a,b;
Scanner s=new Scanner(System.in);
a=s.nextInt();
b=s.nextInt();
System.out.pritln();
for(int i=a+1;i<b;i++)
{
System.out.print(i);
}
}
}

5.
import java.util.Scanner;
public class acad
{
public static void main(String args[])
{
int a;
Scanner s=new Scanner(System.in);
a=s.nextInt();
System.out.println();
for(int i=1;i<11;i++)
{
System.out.println(a+"*"+i+"="+(a*i));
}
}
}

6.
import java.util.Scanner;
public class acad
{
void sum(int a,int b)
{
System.out.println("Sum is:"+(a+b));
}
void sum(double a,double b)
{
System.out.println("Sum is:"+(a+b));
}
public static void main(String args[])
{
acad ob=new acad();
int a,b;
double c,d;
Scanner s=new Scanner(System.in);
System.out.println("enter two integers:");
a=s.nextInt();
b=s.nextInt();
ob.sum(a,b);
System.out.println("enter two float value:");
c=s.nextDouble();
d=s.nextDouble();
ob.sum(c,d);
}
}

7.
 Can you overload a method with the same return type?
solution:
we can overload with same return type but the type of arguments
 should differ.If return type as well as arguments are of same type in different
 functions, then it canot be overloaded.
8.
import java.util.Scanner;
public class Descending_Order
{
    public static void main(String[] args) 
    {
        int n, temp;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter no. of elements you want in array:");
        n = s.nextInt();
        int a[] = new int[n];
        System.out.println("Enter all the elements:");
        for (int i = 0; i < n; i++) 
        {
            a[i] = s.nextInt();
        }
        for (int i = 0; i < n; i++) 
        {
            for (int j = i + 1; j < n; j++) 
            {
                if (a[i] < a[j]) 
                {
                    temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        System.out.print("Descending Order:");
        for (int i = 0; i < n - 1; i++) 
        {
            System.out.print(a[i] + ",");
        }
        System.out.print(a[n - 1]);
    }
}

